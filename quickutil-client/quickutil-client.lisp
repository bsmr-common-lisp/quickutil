;;;; quickutil-client.lisp
;;;; Copyright (c) 2012-2013 Robert Smith

(in-package #:quickutil-client)

(defun category-utilities* (category-names)
  "Query for the symbols in the categories CATEGORY-NAMES."
  (flet ((category-syms (category-name)
           (let ((str (ignore-errors (download-url-string (category-url category-name)))))
             (if (null str)
                 nil
                 (nth-value 0 (read-from-string str))))))
    (loop :for category :in category-names
          :append (category-syms category) :into symbols
          :finally (return (remove-duplicates symbols)))))

(defun category-utilities (&rest category-names)
  "Query for the symbols in the categories CATEGORY-NAMES."
  (category-utilities* category-names))

(defun print-lines (stream &rest strings)
  "Print the lines denoted by the strings STRINGS to the stream
STREAM."
  (dolist (string strings)
    (write-string string stream)
    (terpri stream)))

(defun utilize* (util-names)
  (compile-and-load-from-url (quickutil-query-url util-names)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Public API ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; XXX FIXME: Error when utility is not found instead of just trying
;;; to compile NIL.
(defun utilize (&rest util-names)
  "Load the utilities UTIL-NAMES and their dependencies."
  (utilize* util-names))

(defun utilize-categories (&rest category-names)
  "Load the utilities in the categories CATEGORY-NAMES."
  (utilize* (category-utilities* category-names)))

(defun save-utils-as (filename &rest util-names)
  "Download the utilities listed in UTIL-NAMES to the file named
  FILENAME."
  (with-open-file (file filename :direction :output
                                 :if-exists :supersede
                                 :if-does-not-exist :create)
    (let ((file-contents (download-url-string (quickutil-query-url util-names))))
      ;; Header
      (print-lines file
                   ";;;; This file was automatically generated by Quickutil."
                   ";;;; See http://quickutil.org for details."
                   ""
                   ";;;; To regenerate:")
      (format file ";;;; (qtlc:save-utils-as ~S ~{~S~^ ~})~%~%"
              filename
              (mapcar #'(lambda (symb)
                          (intern (symbol-name symb) :keyword))
                      util-names))
      
      ;; Package definition
      (print-lines file
                   ;; Package Definition
                   "(eval-when (:compile-toplevel :load-toplevel :execute)"
                   "  (unless (find-package '#:quickutil)" 
                   "    (defpackage quickutil"
                   "      (:documentation \"Package that contains the actual utility functions.\")"
                   "      (:nicknames #:qtl)"
                   "      (:use #:cl))))"
                   ""
                   
                   ;; Code
                   file-contents
                   ""
                   
                   ;; End of file
                   (format nil ";;;; END OF ~A ;;;;" filename))

      ;; Return the pathname
      (pathname filename))))

;;; XXX FIXME: This could use improved error handling.
(defun who-provides (symbol)
  "Which utility provides the symbol SYMBOL?"
  (assert (or (symbolp symbol)
              (stringp symbol)))
  (flet ((autoload-lookup (symbol)
           (let* ((autoload-url (reverse-lookup-url symbol))
                  (str (download-url-string autoload-url)))
             (if (string-equal "NIL" str)
                 (error "Could not find originating utility for symbol: ~A"
                        (symbol-name symbol))
                 str))))
    (let ((who (ignore-errors (autoload-lookup (if (symbolp symbol)
                                                   symbol
                                                   (make-symbol symbol))))))
      (nth-value 0 (and who (intern who '#:keyword))))))

(defun symbol-utilities* (symbols)
  (remove nil (remove-duplicates (mapcar #'who-provides symbols))))

(defun utilize-symbols (&rest symbols)
  "Load the utilities which provide the symbols SYMBOLS."
  (apply #'utilize
         (symbol-utilities* symbols)))

(defun combined-utilize (&key utilities categories symbols)
  (utilize* (remove-duplicates (append utilities
                                       (category-utilities* categories)
                                       (symbol-utilities* symbols)))))

