;;;; quickutil-client.lisp
;;;; Copyright (c) 2012-2013 Robert Smith

(in-package #:quickutil-client)

;;;; Client functions, including the public API, which handles the
;;;; loading of utilities.
;;;;
;;;; Convention in this file: If a function name ends in an asterisk,
;;;; then it takes a list as an argument. The same function without
;;;; the asterisk takes &REST arguments.

(defmacro with-temp-file (stream-var file-var &body body)
  `(let* ((,stream-var (cl-fad:open-temporary))
          (,file-var (pathname ,stream-var)))
     (unwind-protect (progn ,@body)
       (close ,stream-var))
     ,file-var))

(defun qtl-utl (symbol)
  (intern (symbol-name symbol) :quickutil-utilities))

(defmacro funcall-qtl-utl (function &rest args)
  `(funcall (intern (symbol-name ',function) :quickutil-utilities) ,@args))

;;; XXX FIXME: This could use improved error handling.
;;; XXX: DELETE?
(defun who-provides (symbol)
  "Which utility provides the symbol SYMBOL?"
  (check-type symbol (or symbol string))
  (quickutil-client-management:with-quickutil-utilities
    (funcall-qtl-utl reverse-lookup symbol)))

;;; XXX: DELETE?
(defun category-utilities (category-names)
  "Query for the symbols in the categories CATEGORY-NAMES."
  (flet ((category-syms (category-name)
           (let ((str (ignore-errors (download-url-string (category-url category-name)))))
             (if (null str)
                 nil
                 (nth-value 0 (read-from-string str))))))
    (loop :for category :in category-names
          :append (category-syms category) :into symbols
          :finally (return (remove-duplicates symbols)))))

;;; XXX: DELETE?
(defun symbol-utilities (symbols)
  (remove nil (remove-duplicates (mapcar #'who-provides symbols))))

;;; XXX: DELETE
(defun query-needed-utilities (&key utilities categories symbols)
  (remove-duplicates
   (append utilities
           (category-utilities categories)
           (symbol-utilities symbols))))

;;; FIXME: Add already-loaded bookkeeping.
(defun utilize (&key utilities categories symbols)
  (quickutil-client-management:with-quickutil-utilities
    (let ((utils (funcall-qtl-utl utilities-for
                                  :utilities utilities
                                  :categories categories
                                  :symbols symbols)))
      (load
       (compile-file
        (with-temp-file stream file
          (write-string
           (funcall-qtl-utl emit-utility-code :utilities utils
                                              :do-not-load qtl:*utilities*)
           stream)))))))

(defun utilize-utilities (utilities)
  "Load the utilities UTILITIES and their dependencies."
  (utilize :utilities utilities))

(defun utilize-categories (categories)
  "Load the utilities in the categories CATEGORIES."
  (utilize :categories categories))

(defun utilize-symbols (symbols)
  "Load the utilities which provide the symbols SYMBOLS."
  (utilize :symbols symbols))

(defun print-lines (stream &rest strings)
  "Print the lines denoted by the strings STRINGS to the stream
STREAM."
  (dolist (string strings)
    (when string
      (write-string string stream)
      (terpri stream))))

(defun ensure-keyword-list (list)
  "Ensure that LIST is a list of keywords."
  (if (listp list)
      (mapcar #'(lambda (symb)
                  (intern (symbol-name symb) '#:keyword))
              list)
      (ensure-keyword-list (list list))))

(defun save-utils-as (filename &key utilities categories symbols
                                    (package "QUICKUTIL" package-given-p)
                                    (package-nickname nil)
                                    (ensure-package t))
  "Save all of the utilities specified by the lists UTILITIES,
CATEGORIES, and SYMBOLS to the file named FILENAME.

The utilities will be put in the package named PACKAGE. If
ENSURE-PACKAGE is true, then the package will be created if it has not
already. If it has not been created, the package will be given the
nickname PACKAGE-NICKNAME. If the nickname is NIL, then no nickname
will be created."
  (with-open-file (file filename :direction :output
                                 :if-exists :supersede
                                 :if-does-not-exist :create)
    (let ((file-contents (download-url-string
                          (quickutil-query-url
                           (query-needed-utilities :utilities utilities
                                                   :categories categories
                                                   :symbols symbols)))))
      ;; Header
      (print-lines file
                   ";;;; This file was automatically generated by Quickutil."
                   ";;;; See http://quickutil.org for details."
                   ""
                   ";;;; To regenerate:")
      (let ((*print-pretty* nil))
        (format file
                ";;;; (qtlc:save-utils-as ~S~@[ :utilities '~S~]~@[ :categories '~S~]~@[ :symbols '~S~] :ensure-package ~S :package ~S~@[ :package-nickname ~S~])~%~%"
                filename
                (ensure-keyword-list utilities)
                (ensure-keyword-list categories)
                (ensure-keyword-list symbols)
                ensure-package
                package
                (cond
                  (package-nickname package-nickname)
                  (package-given-p nil)
                  (t "QTL"))))
      
      ;; Package definition
      (when ensure-package
        (print-lines file
                     ;; Package Definition
                     "(eval-when (:compile-toplevel :load-toplevel :execute)"
                     (format nil "  (unless (find-package ~S)" package)
                     (format nil "    (defpackage ~S" package)
                     "      (:documentation \"Package that contains Quickutil utility functions.\")"
                     (when (or package-nickname (not package-given-p))
                       (format nil "      (:nicknames ~S)"
                               (cond
                                 (package-nickname package-nickname)
                                 (package-given-p nil)
                                 (t "QTL"))))
                     "      (:use #:cl))))"
                     ""))
      
      (print-lines file
                   ;; IN-PACKAGE form
                   (format nil "(in-package ~S)" package)
                   ""
                   
                   ;; Code
                   file-contents
                   ""
                   
                   ;; End of file
                   (format nil ";;;; END OF ~A ;;;;" filename))

      ;; Return the pathname
      (pathname filename))))
